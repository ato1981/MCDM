# Autogenerated with SMOP version 
# /opt/anaconda/bin/smop PROMETHEE_paper.m
from __future__ import division
def PROMETHEE_paper(*args,**kwargs):
    nargout = kwargs["nargout"] if kwargs else None
    varargin = cellarray(args)
    nargin = 0-[].count(None)+len(args)

    m=10
    n=10
    x=matlabarray(cat([1.6,7.7,7.8,5.9,6.6,7.4,6.6,7.7,5.7,7.7],[2,7.2,6.3,5.8,6.2,6.9,6.2,7.2,5.3,7],[2.7,6.5,5.7,4.7,5.9,6.5,5.2,7.8,4.4,6.1],[3.3,6.1,5,5,5.3,6.5,5.1,5.9,4.5,5.3],[3.2,6.6,6.1,5.4,4.6,5,5.9,6.8,7,6.4],[5.8,5.9,5.1,4.8,4.8,3.6,5.3,5.4,6.5,3.9],[6.6,4.6,5.3,4.6,3.8,3.4,5.3,5.2,5.9,5.6],[4.2,6.6,4.4,5.7,5.6,5.2,6,5.5,7.3,5],[5.6,5.8,5.3,4.6,4.2,3.7,5.9,5.6,6.7,5.9],[5.5,5.7,4.9,5,3.9,3.5,5.7,4.3,6.4,5.7]))
    w=matlabarray(cat(0.11,0.085,0.087,0.126,0.124,0.076,0.074,0.092,0.126,0.1))
    a=matlabarray(cat(- 1,1,1,- 1,- 1,- 1,- 1,1,- 1,1))
    for j in arange(1,n).reshape(-1):
        sum_=0
        for i in arange(1,m).reshape(-1):
            sum_=sum_ + x[i,j] ** 2
        for i in arange(1,m).reshape(-1):
            r[i,j]=x[i,j] / sqrt(sum_)
    r
    for j in arange(1,n).reshape(-1):
        for i in arange(1,m).reshape(-1):
            for k in arange(1,m).reshape(-1):
                d[i,k,j]=r[i,j] - r[k,j]
        d
    for j in arange(1,n).reshape(-1):
        for i in arange(1,m).reshape(-1):
            for k in arange(1,m).reshape(-1):
                if a[j] == 1:
                    if d[i,k,j] > 0:
                        p[i,k,j]=1
                    else:
                        p[i,k,j]=0
                else:
                    if d[i,k,j] < 0:
                        p[i,k,j]=1
                    else:
                        p[i,k,j]=0
        p
    for i in arange(1,m).reshape(-1):
        for k in arange(1,m).reshape(-1):
            suma=0
            for j in arange(1,n).reshape(-1):
                suma=suma + p[i,k,j] * w[j]
            q[i,k]=suma
    q
    for i in arange(1,m).reshape(-1):
        suma=0
        for k in arange(1,m).reshape(-1):
            suma=suma + q[i,k]
        phi_pos[i]=suma / (m - 1)
    phi_pos
    for k in arange(1,m).reshape(-1):
        suma=0
        for i in arange(1,m).reshape(-1):
            suma=suma + q[i,k]
        phi_neg[k]=suma / (m - 1)
    phi_neg
    Total=phi_pos - phi_neg
    return